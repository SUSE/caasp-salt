{% set external_fqdn = pillar['api']['server']['external_fqdn'] -%}

### service names ###
# set the apiserver for 127.0.0.1 on all hosts as haproxy is listening on all nodes
# and forwarding connections to the real master
{% if "kube-master" in salt['grains.get']('roles', []) %}
127.0.0.1 api api.{{ pillar['internal_infra_domain'] }}{% if not salt['caasp_filters.is_ip'](external_fqdn) %} {{ external_fqdn }}{% endif %}
{% else %}
127.0.0.1 api api.{{ pillar['internal_infra_domain'] }}
{% endif %}

### admin nodes ###
{%- set admins = salt['mine.get']('roles:admin', 'network.interfaces', 'grain') %}
{%- for admin_id, ifaces in admins.items() %}
{{ salt.caasp_net.get_primary_ip(host=admin_id, ifaces=ifaces) }} {{ admin_id }} {{ admin_id }}.{{ pillar['internal_infra_domain'] }}
{%- endfor %}

### kubernetes masters ###
{%- set masters = salt['mine.get']('roles:kube-master', 'network.interfaces', 'grain') %}
{%- for master_id, ifaces in masters.items() %}
{{ salt.caasp_net.get_primary_ip(host=master_id, ifaces=ifaces) }} {{ master_id }} {{ master_id }}.{{ pillar['internal_infra_domain'] }}
{%- endfor %}

### kubernetes workers ###
{%- set minions = salt['mine.get']('roles:kube-minion', 'network.interfaces', 'grain') %}
{%- for minion_id, ifaces in minions.items() %}
{{ salt.caasp_net.get_primary_ip(host=minion_id, ifaces=ifaces) }} {{ minion_id }} {{ minion_id }}.{{ pillar['internal_infra_domain'] }}
{%- endfor %}
