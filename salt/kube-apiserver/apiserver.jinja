###
# kubernetes system config
#
# The following values are used to configure the kube-apiserver
#

{% set cloud_provider = salt.caasp_pillar.get('cloud:provider') %}
{% set kube_admission_control = ['Initializers', 'NamespaceLifecycle', 'LimitRanger', 'ServiceAccount', 'NodeRestriction', 'PersistentVolumeLabel', 'DefaultStorageClass', 'ResourceQuota', 'DefaultTolerationSeconds'] %}
# The address on the local server to listen to.
KUBE_API_ADDRESS="--bind-address=0.0.0.0"

# The port on the local server to listen on.
KUBE_API_PORT="--insecure-port=0 --secure-port={{ pillar['api']['int_ssl_port'] }}"

# Comma separated list of nodes in the etcd cluster
KUBE_ETCD_SERVERS="--etcd-cafile={{ pillar['ssl']['ca_file'] }} \
                   --etcd-certfile={{ pillar['ssl']['kube_apiserver_crt'] }} \
                   --etcd-keyfile={{ pillar['ssl']['kube_apiserver_key'] }} \
                   --etcd-servers={{ salt.caasp_etcd.get_endpoints(skip_removed=True) }}"

# Address range to use for services
# [alvaro] should not be in the same range as the flannel network (https://github.com/coreos/flannel/issues/232)
KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range={{ pillar['services_cidr'] }}"

# default admission control policies
{% if salt.caasp_pillar.get('addons:psp', True) %}
KUBE_ADMISSION_CONTROL="--admission-control={{ (kube_admission_control + ['PodSecurityPolicy'])|join(',') }}"
{% else %}
KUBE_ADMISSION_CONTROL="--admission-control={{ kube_admission_control|join(',') }}"
{% endif %}

# Add your own!
# We add the reconciler to update the endpoint should one of the additional apiserver go down.
# In newer version of kubernetes (1.11) the `lease` option has become the default and this can be removed.
{%- set num_apiservers = salt['mine.get']('roles:kube-master', 'nodename', expr_form='grain').values()|length %}
KUBE_API_ARGS="--advertise-address={{ salt.caasp_net.get_primary_ip() }} \
               --apiserver-count={{ num_apiservers }} \
{%- if num_apiservers > 1 %}
               --endpoint-reconciler-type='lease' \
{%- endif -%}
{%- if cloud_provider %}
               --cloud-provider={{ pillar['cloud']['provider'] }} \
  {%- if cloud_provider == 'openstack' %}
               --cloud-config=/etc/kubernetes/openstack-config \
  {%- endif -%}
{% endif %}
{#- An empty audit policy file would cause kubernetes apiserver to not start at all -#}
{%- if salt.caasp_pillar.get('api:audit:log:enabled', False) and salt.caasp_pillar.get('api:audit:log:policy') %}
               --audit-policy-file=/etc/kubernetes/audit-policy.yaml \
               --audit-log-path=/var/log/kube-apiserver/audit.log \
               --audit-log-maxage={{ salt.caasp_pillar.get('api:audit:log:maxage') }} \
               --audit-log-maxsize={{ salt.caasp_pillar.get('api:audit:log:maxsize') }} \
               --audit-log-maxbackup={{ salt.caasp_pillar.get('api:audit:log:maxbackup') }} \
{%- endif -%}
               --tls-cert-file={{ pillar['ssl']['kube_apiserver_crt'] }} \
               --tls-private-key-file={{ pillar['ssl']['kube_apiserver_key'] }} \
               --tls-ca-file={{ pillar['ssl']['ca_file'] }} \
               --cert-dir=/etc/pki \
               {{ salt.caasp_pillar.get('components:apiserver:args') }} \
               --requestheader-username-headers=X-Remote-User \
               --requestheader-group-headers=X-Remote-Group \
               --requestheader-extra-headers-prefix=X-Remote-Extra \
               --requestheader-client-ca-file={{ pillar['ssl']['ca_file'] }} \
               --kubelet-certificate-authority={{ pillar['ssl']['ca_file'] }} \
               --kubelet-client-certificate={{ pillar['ssl']['kube_apiserver_kubelet_client_crt'] }} \
               --kubelet-client-key={{ pillar['ssl']['kube_apiserver_kubelet_client_key'] }} \
               --proxy-client-cert-file={{ pillar['ssl']['kube_apiserver_proxy_client_crt'] }} \
               --proxy-client-key-file={{ pillar['ssl']['kube_apiserver_proxy_client_key'] }} \
               --storage-backend={{ pillar['api']['etcd_version'] }} \
               --storage-media-type=application/json \
               --service-account-key-file={{ pillar['paths']['service_account_key'] }} \
               --service-account-lookup=true \
               --runtime-config=admissionregistration.k8s.io/v1alpha1 \
               --authorization-mode=Node,RBAC \
               --oidc-issuer-url=https://{{ pillar['api']['server']['external_fqdn'] }}:{{ pillar['dex']['node_port'] }} \
               --oidc-client-id=kubernetes \
               --oidc-ca-file={{ pillar['ssl']['ca_file'] }} \
               --oidc-username-claim=email \
               --oidc-groups-claim=groups"
