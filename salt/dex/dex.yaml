---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
---
# Map the LDAP Administrators role to the Kubernetes system:masters group
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: suse:caasp:dex
subjects:
- kind: ServiceAccount
  name: dex
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: kube-system
data:
  config.yaml: |
    issuer: "https://{{ pillar['api']['server']['external_fqdn'] }}:{{ pillar['dex']['node_port'] }}"
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/dex.crt
      tlsKey: /etc/dex/tls/dex.key
    frontend:
      dir: /usr/share/caasp-dex/web
      theme: caasp
    connectors:
    - type: ldap
      id: ldap
      name: LDAP
      config:
        host: "{{ pillar['dashboard'] }}:389"
        startTLS: true
        bindDN: "{{ pillar['ldap']['bind_dn'] }}"
        bindPW: "{{ pillar['ldap']['bind_pw'] }}"
        rootCA: {{ pillar['ssl']['ca_file'] }}
        userSearch:
          baseDN: "{{ pillar['ldap']['people_dn'] }}"
          filter: "(objectClass=inetOrgPerson)"
          username: "{{ pillar['ldap']['mail_attribute'] }}"
          idAttr: DN
          emailAttr: "{{ pillar['ldap']['mail_attribute'] }}"
          nameAttr: cn
        groupSearch:
          baseDN: "{{ pillar['ldap']['group_dn'] }}"
          filter: "(objectClass=groupOfUniqueNames)"

          userAttr: DN
          groupAttr: uniqueMember

          nameAttr: cn
    oauth2:
      skipApprovalScreen: true

    staticClients:
    - id: kubernetes
      redirectURIs:
      - 'urn:ietf:wg:oauth:2.0:oob'
      name: "Kubernetes"
      secret: "{{ pillar['dex']['client_secrets']['kubernetes'] }}"
      trustedPeers:
      - caasp-cli
      - velum

    - id: caasp-cli
      redirectURIs:
      - 'urn:ietf:wg:oauth:2.0:oob'
      - 'http://127.0.0.1'
      - 'http://localhost'
      name: "CaaSP CLI"
      secret: "swac7qakes7AvucH8bRucucH"
      public: true

    - id: velum
      redirectURIs:
      - 'https://{{ pillar['dashboard'] }}/oidc/done'
      - 'https://{{ pillar['dashboard_external_fqdn'] }}/oidc/done'
      name: "Velum"
      secret: "{{ pillar['dex']['client_secrets']['velum'] }}"
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: dex
    kubernetes.io/cluster-service: "true"
  name: dex
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: dex
  replicas: 3
  template:
    metadata:
      labels:
        app: dex
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: dex
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: "CriticalAddonsOnly"
        operator: "Exists"

      # ensure dex pods are running on different hosts
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - dex
              topologyKey: "kubernetes.io/hostname"

      containers:
      - image: sles12/caasp-dex:2.7.1
        name: dex
        command: ["/usr/bin/caasp-dex", "serve", "/etc/dex/cfg/config.yaml"]

        ports:
        - name: https
          containerPort: 5556

        readinessProbe:
          # Give Dex a little time to startup
          initialDelaySeconds: 30
          failureThreshold: 5
          successThreshold: 5
          timeoutSeconds: 10
          httpGet:
            path: /healthz
            port: https
            scheme: HTTPS

        livenessProbe:
          httpGet:
            path: /healthz
            port: https
            scheme: HTTPS

        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
        - name: tls
          mountPath: /etc/dex/tls
        - name: ca
          mountPath: {{ pillar['ssl']['ca_file'] }}

      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: dex-tls
      - name: ca
        hostPath:
          path: {{ pillar['ssl']['ca_file'] }}
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Dex"
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: https
    nodePort: {{ pillar['dex']['node_port'] }}
  selector:
    app: dex
