mysql:
  # you still need the 'host' value here, or it will use the defaults and try to connect
  # on a host named 'salt'
  host: 'localhost'
  user: 'salt'
  db: 'velum_production'
  unix_socket: '/var/run/mysql/mysql.sock'

ext_pillar:
  - mysql:
    # These queries allow us to override our pillar values up to a depth of 6
    #
    # Considering we have on our static pillar:
    #
    #   certificate_information:
    #     subject_properties:
    #       C: DE
    #       O: SUSE
    #       ...
    #
    # We are able to prioritize pillar information overriding the default values.
    #
    # In this example, if we had a mysql row:
    #   INSERT INTO pillars(pillar, value) VALUES ("certificate_information:subject_properties:O",
    #                                              "My Company");
    #
    # We would see on the pillar:
    #
    #   certificate_information:
    #     subject_properties:
    #       C: DE
    #       O: My Company
    #       ...
    #
    # Please, note that this will only work until a depth of 3 properties. If we want to provide
    # more depth, we would need to add more columns, as salt treats each column as a nested property
    # inside the previous one. For further information, please visit:
    #   https://docs.saltstack.com/en/latest/ref/pillar/all/salt.pillar.sql_base.html
    #
    # Lists can be represented as collisions:
    #   INSERT INTO pillars(pillar, value) VALUES ("my_service:extra_ips", "127.0.0.1");
    #   INSERT INTO pillars(pillar, value) VALUES ("my_service:extra_ips", "127.0.0.2");
    #
    # Will be represented as:
    #
    #   my_service:
    #     extra_ips:
    #       - 127.0.0.1
    #       - 127.0.0.2
    #
    # Query for first level pillar values (no dots in `pillar` key)
    - query: 'SELECT pillar,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 0) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for second level pillar values (one dot in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 1) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for third level pillar values (two dots in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 2) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for forth level pillar values (three dots in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 4), ":", -1) AS key4,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 3) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for fifth level pillar values (four dots in `pillar` key)
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 4), ":", -1) AS key4,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 5), ":", -1) AS key5,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 4) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
    # Query for sixth level pillar values (five dots in `pillar` key)
    # This specificially queries the network_interfaces configuration for EC2,
    # which requires to be a list
    - query: 'SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 1), ":", -1) AS key1,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 2), ":", -1) AS key2,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 3), ":", -1) AS key3,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 4), ":", -1) AS key4,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 5), ":", -1) AS key5,
                     SUBSTRING_INDEX(SUBSTRING_INDEX(pillar, ":", 6), ":", -1) AS key6,
                     value
                     FROM pillars WHERE
                       (LENGTH(pillar) - LENGTH(REPLACE(pillar, ":", "")) = 5) AND
                       (minion_id IS NULL OR minion_id = %s)'
      as_list: True
      with_lists: [4]
